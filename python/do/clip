#!/usr/bin/env python3
# Capture random bits

import sys
import os
import datetime
import re


def update_dir(git_dir):
    if not os.path.isdir(git_dir):
        # exit if git_dir not exits
        print(git_dir, 'not exists')
        sys.exit()
    else:
        # update git repo
        os.system('cd {} && git pull'.format(git_dir))


def ensure_file(filename, title):
    # new file for new month
    if not os.path.isfile(filename):
        with open(filename, 'w') as f:
            f.write('# {}\n'.format(title))


def write_link(filename, link):
    # For a naive object, the %z and %Z format codes are replaced by empty strings.
    date_time = os.popen('date +%Y-%m-%d\ %H:%M:%S\ %z').read().strip()
    lines = open(filename).readlines()
    with open(filename, 'w') as f:
        f.writelines(lines[:1])
        f.write('\n')
        f.write('{} {}\n'.format(link, date_time))
        f.write('\n')
        f.write('---\n')
        f.writelines(lines[1:])


def new_clip(link):
    re_link = '\[.*\]\(.*\)'
    if re.search(re_link, link):
        print('Link')
        clip_dir = os.path.dirname(os.environ['DOTFILES']) + '/clips'
        update_dir(clip_dir)

        month = datetime.datetime.now().strftime('%Y-%m')
        filename = os.path.join(clip_dir, month) + '.md'
        ensure_file(filename, month)

        write_link(filename, link)

        os.system('cd {} && git add {} && git commit -m "clip" && git diff HEAD^ HEAD'.format(clip_dir, filename))
    else:
        print('Undefined')


if __name__ == '__main__':
    if len(sys.argv) != 2:
        print("Usage: clip '[title](url)'")
        sys.exit()

    new_clip(sys.argv[1])
